From: <Saved by Microsoft Internet Explorer 5>
Subject: Style Guide for Rexx
Date: Fri, 14 Jul 2006 17:18:28 +0530
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_0021_01C6A769.85B1E230"
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.2180

This is a multi-part message in MIME format.

------=_NextPart_000_0021_01C6A769.85B1E230
Content-Type: text/html;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.erroneousbee.demon.co.uk/Computers/RexxStyleGuide.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>Style Guide for Rexx</TITLE>
<META http-equiv=3DContent-Type content=3D"text/html; =
charset=3Diso-8859-1">
<META content=3D19991123;22522605 name=3DCREATED>
<META content=3D16010101;0 name=3DCHANGED>
<META content=3D"Style Tips for Rexx in OS/390 environments." =
name=3DDESCRIPTION>
<META content=3D"Rexx TSO MVS OS/390" name=3DKEYWORDS>
<META content=3D"MSHTML 6.00.2900.2802" name=3DGENERATOR></HEAD>
<BODY bgColor=3D#ffffff>
<TABLE style=3D"PAGE-BREAK-BEFORE: always" cellPadding=3D2 =
width=3D"100%" border=3D0>
  <TBODY>
  <TR>
    <TD>
      <P align=3Dleft><A=20
      =
href=3D"http://www.erroneousbee.demon.co.uk/Computers/index.html"><IMG=20
      height=3D30 =
src=3D"http://www.erroneousbee.demon.co.uk/Pics/o_up.gif" width=3D30=20
      border=3D0 name=3DGraphic1></A><A=20
      =
href=3D"http://www.erroneousbee.demon.co.uk/Computers/index.html">Up to =
the=20
      computing page. </A><BR><A =
href=3D"mailto:NHancock@bigfoot.com"><IMG=20
      height=3D30 =
src=3D"http://www.erroneousbee.demon.co.uk/Pics/o_mailto.gif"=20
      width=3D30 border=3D0 name=3DGraphic2></A><A=20
      href=3D"mailto:NHancock@bigfoot.com">Send Feedback.</A></P></TD>
    <TD>
      <P align=3Dright>Last-modified: 01 Sept 2000<BR>Version: =
1.3c<BR>Author:=20
      Neil Hancock</P></TD></TR></TBODY></TABLE>
<H1 align=3Dcenter><IMG height=3D50=20
src=3D"http://www.erroneousbee.demon.co.uk/Pics/fish3.gif" width=3D100=20
name=3DGraphic3></H1>
<H1 align=3Dcenter>Style Guide for Rexx </H1>
<HR>

<H1 align=3Dcenter>Introduction.</H1>
<P>This is a style guide for the Rexx programming language, primarily =
aimed at=20
Rexx in the OS/390 environment, but application to Rexx on other =
platforms, and=20
to variants of Rexx such as NetRexx. Many of the points here have been =
raised at=20
some time on the <A=20
href=3D"http://www.marist.edu/htbin/wlvindex?tso-rexx">TSO-REXX listserv =

</A>mailing list. </P>
<HR>

<H1 align=3Dcenter>Using Comments. </H1>
<P>Correctly commenting code is one of the most useful things you can do =
when=20
writing code. Most style problems can be repaired with a formatter, but =
useful=20
comments cannot be conjured out of thin air.</P>
<P><IMG height=3D20 =
src=3D"http://www.erroneousbee.demon.co.uk/Pics/fish4.gif"=20
width=3D45 name=3DGraphic4>Comments come in two flavours, =
<STRONG>winged</STRONG>=20
and <STRONG>boxed</STRONG>:</P>
<TABLE cellPadding=3D2 width=3D"100%" bgColor=3D#b4b8cd border=3D0>
  <TBODY>
  <TR>
    <TD><PRE style=3D"MARGIN-BOTTOM: 0.5cm">/* This is a winged comment =
*/
/**************************************\
 *             This is a              *
 *           boxed comment            *
\**************************************/</PRE></TD></TR></TBODY></TABLE>
<P>Boxed comments should be reserved to highlight major structural =
elements,=20
such as the start of procedures. See the <A=20
href=3D"http://www.erroneousbee.demon.co.uk/Computers/RexxStyleGuide.html=
#CalculateFactorial">Calculate_Factorial()</A>=20
example.<BR>Winged comments are useful for describing the purpose of the =

statement(s) immediatly adjacent to the comment.</P>
<P><IMG height=3D20 =
src=3D"http://www.erroneousbee.demon.co.uk/Pics/fish4.gif"=20
width=3D45 name=3DGraphic5>It may also be worth borrowing from the =
Javadoc idea.=20
Comments enclosed by <STRONG>/** ... */ </STRONG>may be read by a =
suitable=20
program, and the text within associated with the immediately following =
Rexx=20
statement, and used to automate the creation of external documentation =
for the=20
program.</P>
<P><IMG height=3D20 =
src=3D"http://www.erroneousbee.demon.co.uk/Pics/fish4.gif"=20
width=3D45 name=3DGraphic5>The use of asterisks (*) as the box border =
can make the=20
comment too heavy. Consider using minus (-) or another lighter character =

instead. Also, don't worry about closing the right hand vertical, as =
realigning=20
the border after text insertion is a tedious affair. You may have a Rexx =

reformatter that deals with this problem.</P>
<P><IMG height=3D20 =
src=3D"http://www.erroneousbee.demon.co.uk/Pics/fish4.gif"=20
width=3D45 name=3DGraphic5>A common use of boxed comments is for an=20
<STRONG>informative header</STRONG> at the start of the exec. Here is an =

example:</P>
<TABLE cellPadding=3D2 width=3D"100%" bgColor=3D#b4b8cd border=3D0>
  <TBODY>
  <TR>
    <TD><PRE>/* Rexx ----------------------------------------- AUTOTOOL
   &lt;A one line description for use by an indexing tool&gt;
   -------------------------------------------------------
   Copyright: &lt;You may want a copyright notice&gt;
   Change History:
   &lt;yy/mmm/dd Userid VersId Description&gt;=20
   Description:
   &lt;A long description of the purpose of the exec.
   Include invocation arguments, examples of call
   syntax, returned values, etc.&gt;=20
   ---------------------------------------------- MEMNAME =
*/</PRE></TD></TR></TBODY></TABLE>
<P>It is extremely useful to have a tool to handle the creation of a =
standard=20
header, and to handle change history information. Note the marker in the =
top=20
right of the box that may be used by a tool to spot whether this is a =
standard=20
header or not.</P>
<P>An indexing tool that reads the short description and change history =
is also=20
useful, so make sure the header format supplies information that would =
be useful=20
to an indexing tool.</P>
<P>In the change history, put the most recent changes at the top, so =
they are=20
visible when the exec is opened. It may also be useful to have a version =
id to=20
mark changed code in small comments later on.</P>
<P>It may not be worth putting some types of information in the header,=20
particularly data that ages poorly. Dataset names and pointers to =
external=20
information are particularly prone to becoming incorrect.</P>
<P><IMG height=3D20 =
src=3D"http://www.erroneousbee.demon.co.uk/Pics/fish4.gif"=20
width=3D45 name=3DGraphic6> Things to avoid when creating comments:</P>
<UL>
  <LI>Stating the obvious. E.g. <STRONG>string =3D =
TRANSLATE(STRIP(string)) /*=20
  Strip and uppercase string */</STRONG>=20
  <LI>Using 'content free' phrases such as <STRONG>'We call this Rexx =
program to=20
  get a returned value to the caller consisting of....'</STRONG>. This =
also=20
  applies to function names, E.g. In Perform_Update_Function(), the =
words=20
  'perform' and 'function' tell us nothing useful, try Update_Table() =
instead.=20
  <LI>Using acronyms and abbreviations to the point of crypticness. E.g. =

  <STRONG>/* prt opt pg len */ </STRONG>instead of <STRONG>/* print =
option -=20
  page length */</STRONG>. </LI></UL>
<HR>

<H1 align=3Dcenter>Using Symbols and Variables. </H1>
<P>The Rexx ANSI standard talks of Rexx 'symbols'. Here I shall use the =
more=20
familiar terms 'variable', 'variable name' and 'variable =
value'.<BR>Compound=20
variables, stems, and tails refer to the whole and various parts of =
compound=20
variables. </P>
<P><IMG height=3D20 =
src=3D"http://www.erroneousbee.demon.co.uk/Pics/fish4.gif"=20
width=3D45 name=3DGraphic7>Always make your variable names useful and =
meaningful.=20
</P>
<P>Some programmers use a form of <A=20
href=3D"http://www.google.com/search?q=3Dhungarian+notation">Hungarian =
Notation</A>=20
to show when a variable is boolean, a loop index, numeric, etc. This may =
make=20
your variable names not so easy to read, and has other <A=20
href=3D"http://www.erroneousbee.demon.co.uk/Computers/RexxStyleGuide.html=
#Hungarian">dissadvantages</A>.</P>
<P>Consider using i, j, k, etc as loop control variables. There are =
advantages=20
and disadvantages to this:<BR><IMG height=3D10=20
src=3D"http://www.erroneousbee.demon.co.uk/Pics/o_plus.gif" width=3D50> =
Faster=20
execution speed. Single character variable names show a performance =
improvment=20
(My simple test measured nearly 10% improvement).<BR><IMG height=3D10=20
src=3D"http://www.erroneousbee.demon.co.uk/Pics/o_plus.gif" width=3D50> =
Compound=20
variables names are shorter and less likely to make long statements =
cross onto=20
multiple lines.<BR><IMG height=3D10=20
src=3D"http://www.erroneousbee.demon.co.uk/Pics/o_minus.gif" width=3D50> =
You have to=20
rely on the stem name to indicate the meaning of the data in the =
compound=20
variable. E.g. Consider compound var names <STRONG>record.i</STRONG> and =

<STRONG>score.teamIndex.eventIndex</STRONG> . It is obvious that=20
<STRONG>i</STRONG> is the record number, but would it be obvious from=20
<STRONG>score.i.j</STRONG> that <STRONG>i</STRONG> is the team and=20
<STRONG>j</STRONG> is the event?</P>
<P><IMG height=3D20 =
src=3D"http://www.erroneousbee.demon.co.uk/Pics/fish4.gif"=20
width=3D45 name=3DGraphic7>Global variables can be handled in the =
following=20
way:<BR>First, in the opening section of your Exec, set a variable named =
global=20
whose contents are the stem names of your global variables:</P>
<TABLE cellPadding=3D2 width=3D"100%" bgColor=3D#b4b8cd border=3D0>
  <TBODY>
  <TR>
    <TD><PRE>global =3D 'gl.' /* set a list of stems that are global =
variables */
gl.testVar =3D 'This is a sample global =
variable.'</PRE></TD></TR></TBODY></TABLE>
<P>Then, at each procedure start, expose this global, and its =
contents:</P>
<TABLE cellPadding=3D2 width=3D"100%" bgColor=3D#b4b8cd border=3D0>
  <TBODY>
  <TR>
    <TD><PRE>An_Internal_Function: procedure expose (global)
say gl.testVar /* =3D=3D&gt; This is a sample global variable. */
return 0</PRE></TD></TR></TBODY></TABLE>
<P><IMG height=3D20 =
src=3D"http://www.erroneousbee.demon.co.uk/Pics/fish4.gif"=20
width=3D45 name=3DGraphic8>Do use the <STRONG>procedure</STRONG> keyword =
with every=20
defined procedure. This hides the procedure's internal variables from =
the=20
caller, and allows the use of<STRONG> i,j </STRONG>and =
<STRONG>k</STRONG> as=20
loop control variables throughout your program without any side effects, =
as in=20
this example:</P>
<TABLE cellPadding=3D2 width=3D"100%" bgColor=3D#b4b8cd border=3D0>
  <TBODY>
  <TR>
    <TD><PRE><A name=3DCalculateFactorial>do i =3D 5 to 10</A>
 say 'Number:'i 'Factorial:'Calculate_Factorial(2,i)
end
exit
/*  --------------------------------------
    Return the multiple (factorial) of all =20
    numbers between arg1 and arg2.
    -------------------------------------- */
Calculate_Factorial: procedure
parse arg startNum,endNum
factorial =3D 1
do i =3D startNum to endNum
 factorial =3D factorial * i
end
return factorial</PRE></TD></TR></TBODY></TABLE>
<P><IMG height=3D20 =
src=3D"http://www.erroneousbee.demon.co.uk/Pics/fish4.gif"=20
width=3D45 name=3DGraphic9>This common problem occurs when a variable is =
assigned a=20
value, and the variable is then used in a compound variable:</P>
<TABLE cellPadding=3D2 width=3D"100%" bgColor=3D#b4b8cd border=3D0>
  <TBODY>
  <TR>
    <TD><PRE>stem.salutation =3D 'HELLO!'   /* literally stem.SALUTATION =
=3D 'HELLO!' */ </PRE><PRE>/* Output the intended result */
say stem.salutation          /* =3D=3D&gt; HELLO! */</PRE><PRE>/* Set =
the tail of the compound variable to have a value */
salutation =3D 'GOODBYE'</PRE><PRE>/* Now show an often unintended =
result */=20
say stem.salutation          /* =3D=3D&gt; STEM.GOODBYE */=20
exit</PRE></TD></TR></TBODY></TABLE>
<P>If you don't want this effect, you must use unassigned variable names =
in the=20
compound variable. You could use non-alphanumeric characters such as=20
<STRONG>!</STRONG> or <STRONG>?</STRONG> to prefix the variable name =
when its=20
used in the compund tail, or use a numeric prefix, as symbols starting =
with=20
numerics are, by definition, constants.</P>
<TABLE cellPadding=3D2 width=3D"100%" bgColor=3D#b4b8cd border=3D0>
  <TBODY>
  <TR>
    <TD><PRE>testVar =3D 'HELLO'
stem.0testVar =3D testVar
stem.!testVar =3D testVar</PRE></TD></TR></TBODY></TABLE>
<P><A name=3DHungarian></A>Numeric prefixes are better for code=20
portability.<BR>The ISPF editor picks special characters (such as !) up =
in HILTE=20
mode.<BR>Non-alphanumeric characters may not be portable to foreign =
EBCDIC=20
character sets, and are not portable to some Rexx extentions, such as=20
Object-Oriented Rexx.</P>
<P><IMG height=3D20 =
src=3D"http://www.erroneousbee.demon.co.uk/Pics/fish4.gif"=20
width=3D45 name=3DGraphic10>Large blocks of variable assignations can be =
split into=20
columns, with variable names, variable values, and winged comments:</P>
<TABLE cellPadding=3D2 width=3D"100%" bgColor=3D#b4b8cd border=3D0>
  <TBODY>
  <TR>
    <TD><PRE><A name=3DVarAssignComments>gl.Bdebug</A>            =3D 0  =
            /* Turns debugging on/off */
gl.!pageLength       =3D 60             /* print option - page length */
gl.!pageWidth        =3D 50             /* print option - page width =
*/</PRE></TD></TR></TBODY></TABLE>
<HR>

<H1 align=3Dcenter>Case, Indentation and Block Structure.</H1>
<P>Here we discuss the case we could use for syntactic elements, what=20
indentation is appropriate, and how we could break blocks of statements =
up.</P>
<P>But first, What are we trying to achieve, and how do we go about =
achieving=20
our aim.</P>
<P><IMG height=3D20 =
src=3D"http://www.erroneousbee.demon.co.uk/Pics/fish4.gif"=20
width=3D45 name=3DGraphic11>We are trying to increase the readability of =
the code.=20
</P>
<P>We can improve readability by using techniques to differentiate and =
highlight=20
elements within a statement, show relationships between statements, and =
lay out=20
the code so that these relationships and statement elements are visible =
to the=20
reader.</P>
<P>The target audience should be anyone likely to need to change your =
code in=20
the future, including yourself. Don't assume any knowledge of the inner =
workings=20
of your code, it may be some years before you revisit it. A reasonable =
knowledge=20
of Rexx may be assumed, even though the reader may be new to the =
language.=20
Everyone has to learn something sometime.</P>
<P><IMG height=3D20 =
src=3D"http://www.erroneousbee.demon.co.uk/Pics/fish4.gif"=20
width=3D45 name=3DGraphic12>Here are some elements that go to make up=20
statements:</P>
<UL>
  <LI>Keywords such as <STRONG>IF, SELECT</STRONG> and =
<STRONG>CALL</STRONG>.=20
  <LI>Variable names such as <STRONG>USERNAME</STRONG>, or=20
  <STRONG>USERCARDNUMBER</STRONG>.=20
  <LI>Major Blocks such as <STRONG>DO</STRONG> <STRONG>count</STRONG> -=20
  <STRONG>END</STRONG>, <STRONG>SELECT</STRONG> - <STRONG>END</STRONG> =
and=20
  <STRONG>label: PROCEDURE - RETURN</STRONG>.=20
  <LI>Contitional Blocks such as <STRONG>IF cond THEN DO - END</STRONG> =
and=20
  <STRONG>WHEN cond THEN DO - END</STRONG>.=20
  <LI>Natural Blocks of statements that together perform a particular =
function.=20
  <LI>Builtin function names such as <STRONG>POS()</STRONG>,=20
  <STRONG>D2B()</STRONG>, and <STRONG>TRANSLATE()</STRONG>.=20
  <LI>Implementation supplied builtin external functions such as=20
  <STRONG>MVSVAR()</STRONG> and <STRONG>LISTDSI()</STRONG>.=20
  <LI>User supplied external functions such as =
<STRONG>MYFUNC()</STRONG>.=20
  <LI>Internal functions such as <STRONG>MYINTERNALFUNCTION()</STRONG>.=20
  <LI>Commands to external environments such as <STRONG>ADDRESS TSO=20
  "LISTCAT"</STRONG>=20
  <LI>Comments.=20
  <LI>Literal text. </LI></UL>
<P><IMG height=3D20 =
src=3D"http://www.erroneousbee.demon.co.uk/Pics/fish4.gif"=20
width=3D45 name=3DGraphic13>Here are some techniques to improve =
readability using=20
case:</P>
<UL>
  <LI><STRONG>UPPER</STRONG>, <STRONG>lower</STRONG> and =
<STRONG>Mixed</STRONG>=20
  case.=20
  <LI>Concatenated words with case differentiation such as=20
  <STRONG>ConcatenatedWords</STRONG>.=20
  <LI>Underscore separated words such as=20
  <STRONG>underscore_separated_words</STRONG>. </LI></UL>
<P><IMG height=3D20 =
src=3D"http://www.erroneousbee.demon.co.uk/Pics/fish4.gif"=20
width=3D45 name=3DGraphic14>Other techniques to improve readability =
are:.</P>
<UL>
  <LI><STRONG>Indenting</STRONG> blocks or statements within blocks.=20
  <LI><STRONG>Aligning </STRONG>the start of a block with its end.=20
  <LI><STRONG>Splitting</STRONG> <STRONG>statements </STRONG>across more =
than=20
  one line.=20
  <LI>Inserting<STRONG> blank lines</STRONG> between blocks.=20
  <LI>Using <STRONG>boxed comments </STRONG>before major structural =
items.=20
</LI></UL>
<P><IMG height=3D20 =
src=3D"http://www.erroneousbee.demon.co.uk/Pics/fish4.gif"=20
width=3D45 name=3DGraphic11>We are also concerned with breaking up the =
code into=20
manageable and reusable units. We can do this by using procedures, and =
by=20
surrounding blocks of statements that perform a task with white =
space.</P>
<P>&nbsp;</P>
<HR>

<H1 align=3Dcenter>Constraints and Influences on Style Guide Rules</H1>
<P>There are some facts about the programming environment that influence =
what=20
techniques may be most effective.</P>
<P><IMG height=3D20 =
src=3D"http://www.erroneousbee.demon.co.uk/Pics/fish4.gif"=20
width=3D45 name=3DGraphic15>External function names are related to file =
names in a=20
file system, or member names in partitioned datasets. MYFUNC() may refer =
to PDS=20
'user.EXEC(MYFUNC)' or file name MYFUNC.REXX, depending on your Rexx=20
environment. By using upper case for external function names, you avoid =
having=20
to quote function names to maintain lower case in the file name. You =
then, of=20
course, must use upper case in the file names of external functions.</P>
<P><IMG height=3D20 =
src=3D"http://www.erroneousbee.demon.co.uk/Pics/fish4.gif"=20
width=3D45 name=3DGraphic15>Screen size influences how much code can be =
on the=20
screen at one time. Using too many blank lines or splitting statements =
over=20
multiple lines can move code out of the viewable area. Techniques that =
disperse=20
statements over several lines work well on window based systems that =
allow the=20
viewable area to be adjusted, but are restricted by the fixed terminal =
size of=20
3270 systems. The same is true for boxed comments.</P>
<P><IMG height=3D20 =
src=3D"http://www.erroneousbee.demon.co.uk/Pics/fish4.gif"=20
width=3D45 name=3DGraphic15>Some editors are Rexx aware and can <A=20
href=3D"http://www.erroneousbee.demon.co.uk/Computers/RexxStyleHilite.htm=
l">hilite=20
Rexx code</A> to show keywords, quoted strings and other elements. A =
Rexx aware=20
editor such as ISPF EDIT with the HILITE utility, can for instance turn =
all=20
keywords red, and all comments blue. There's no point in using upper =
case to=20
highlight keywords, when the editor can pick them out with colour.</P>
<P><IMG height=3D20 =
src=3D"http://www.erroneousbee.demon.co.uk/Pics/fish4.gif"=20
width=3D45 name=3DGraphic15>Keywords appear in isolation in the text, =
and also tend=20
to appear at the start of statements, so they stand out without any help =
from=20
the programmer.</P>
<P><IMG height=3D20 =
src=3D"http://www.erroneousbee.demon.co.uk/Pics/fish4.gif"=20
width=3D45 name=3DGraphic15>Function and variable names tend to appear =
close=20
together in code. We need to be able to differentiate variable names =
from=20
function names, and also differentiate between the various flavours of =
function;=20
internal, external, builtin, etc. For example:</P>
<TABLE cellPadding=3D2 width=3D"100%" bgColor=3D#b4b8cd border=3D0>
  <TBODY>
  <TR>
    <TD><PRE> datasetName =3D STRIP(TRANSLATE(GetDsn(ddName)),,"'")
or
 datasetName =3D =
STRIP(TRANSLATE(Get_Dataset_Name(ddName)),,"'")</PRE></TD></TR></TBODY></=
TABLE>
<P><IMG height=3D20 =
src=3D"http://www.erroneousbee.demon.co.uk/Pics/fish4.gif"=20
width=3D45 name=3DGraphic15>Literals should be quoted, unless you can be =
sure that=20
the literal hasn't been used as a symbol elsewhere.</P>
<P><IMG height=3D20 =
src=3D"http://www.erroneousbee.demon.co.uk/Pics/fish4.gif"=20
width=3D45 name=3DGraphic15>Commands being passed to external =
environments often=20
have single quotes in them. E.g. <STRONG>address TSO "ALLOC FI(TEST)=20
DA('MY.DATASET') SHR REUSE". </STRONG></P>
<P><IMG height=3D20 =
src=3D"http://www.erroneousbee.demon.co.uk/Pics/fish4.gif"=20
width=3D45 name=3DGraphic15>NetRexx (and presumably other close =
relatives of Rexx)=20
are sufficiently different from Rexx to make consideration of styles =
that apply=20
to NetRexx irrelevant. Having said that NetRexx is a case insensitive =
language,=20
and most style rules should apply to it.</P>
<HR>

<H1 align=3Dcenter>An Example Set of Style Rules.</H1>
<P>Here is programming style that meets the above criteria in varying =
degrees.=20
It tries to keep the code dense for 3270 displays, and relies heavily on =
a=20
highlighting editor to differentiate between keywords, quoted text, =
variable=20
names, and other statement elements.</P>
<P><IMG height=3D20 =
src=3D"http://www.erroneousbee.demon.co.uk/Pics/fish4.gif"=20
width=3D45 name=3DGraphic16>Rules specifically related to case:</P>
<UL>
  <LI>Keywords in lower case. Let the editor highlight them. E.g. =
<STRONG>select=20
  do if end </STRONG>
  <LI>Variable names starting in lower case with the initial letters of=20
  concatenated words in upper case. This differentiates them from =
function=20
  names, which will all start with an upper case character. E.g. =
<STRONG>myName=20
  counter fishType</STRONG>=20
  <LI>Internal function names with the initial letters of individual =
words in=20
  upper case. Optionally, you can also use underscore separators E.g.=20
  <STRONG>MyFunction() MyOtherFunction() Your_Function()</STRONG>=20
  <LI>External function names in upper case. This saves having to quote =
them.=20
  E.g. <STRONG>MYFUNC() EXTFUNC()</STRONG>=20
  <LI>Builtin functions in upper case. This rule is pretty arbitrary, as =
the=20
  highlighting editor will mark them in a different colour to user =
supplied=20
  functions anyway. E.g. <STRONG>SUBSTR() D2B() MVSVAR()</STRONG>=20
  <LI>External environment names in upper case. Note that address treats =
the=20
  environment name as a constant, and does not perform symbolic =
substitution.=20
  E.g. <STRONG>address TSO "X", address ISPEXEC "FTCLOSE", address SH =
"cat=20
  myfile"</STRONG>=20
  <LI>Commands for external environments preferably in upper case, =
unless the=20
  environment is case sensitive. E.g. <STRONG>address TSO "ALLOC =
FI("ddName")=20
  SHR REUSE DA("dsName")"</STRONG> </LI></UL>
<P><IMG height=3D20 =
src=3D"http://www.erroneousbee.demon.co.uk/Pics/fish4.gif"=20
width=3D45 name=3DGraphic17>Rules for quoting:</P>
<UL>
  <LI>Enclose commands to external environments in double quotes, coming =
out of=20
  quotes to pass variables into the command. E.g. <STRONG>address TSO =
"ALLOC=20
  FI("ddName") SHR REUSE DA("dsName")"</STRONG>=20
  <LI>Always quote literal strings. Never rely on the string not being =
used as a=20
  variable name. E.g. <STRONG>myVar =3D 'test'</STRONG>. Never use =
<STRONG>myVar =3D=20
  test</STRONG>=20
  <LI>Use variables for quotes if building strings containing both =
single and=20
  double quotes to avoid the opening and closing becoming confusing: =
E.g.=20
  <STRONG>myVar =3D dq||sq||'test'||sq||dq</STRONG> rather than =
<STRONG>myVar =3D=20
  '"'"'test'"'"'</STRONG> </LI></UL>
<P><IMG height=3D20 =
src=3D"http://www.erroneousbee.demon.co.uk/Pics/fish4.gif"=20
width=3D45 name=3DGraphic18>Rules for procedures:</P>
<UL>
  <LI>Use the <STRONG>procedure</STRONG> keyword wherever possible, to =
avoid=20
  collisions between variable names in different procedures. E.g.=20
  <STRONG>My_Function: procedure expose (global).</STRONG>=20
  <LI>Use commas and <EM>not</EM> spaces to delimit your arguments. See =
the <A=20
  =
href=3D"http://www.erroneousbee.demon.co.uk/Computers/RexxStyleGuide.html=
#CalculateFactorial">Calculate_Factorial</A>=20
  demo for an example.=20
  <LI>Use a comment in the style of javaDoc before each procedure, so =
that=20
  possible future 'rexxDoc' implementations will be able to pick up your =

  comments. See the <A=20
  =
href=3D"http://www.erroneousbee.demon.co.uk/Computers/RexxStyleGuide.html=
#ProcComment">LZ78=20
  demo</A> for an example. </LI></UL>
<P><IMG height=3D20 =
src=3D"http://www.erroneousbee.demon.co.uk/Pics/fish4.gif"=20
width=3D45 name=3DGraphic19>Rules for comments:</P>
<UL>
  <LI>Use a standard machine readable header to document a synopsis of =
the exec,=20
  change information, and any other useful information. Create a tool to =
manage=20
  and extract useful information from these headers.=20
  <LI>Comment logical groups of statements, indicating what they do. =
E.g.=20
  <STRONG>do</STRONG> loops, <STRONG>select</STRONG> blocks.=20
  <LI>Aim your comments at a reasonably competent programmer who is not =
familiar=20
  with your exec.=20
  <LI>Comment what end statements are ending. E.g. <STRONG>end /* select =

  */.</STRONG>=20
  <LI>Indicate what variables are to be used for when they are first =
assigned.=20
  See the example in an earlier chapter.=20
  <LI>Use a boxed comment to mark where procedures begin. See the <A=20
  =
href=3D"http://www.erroneousbee.demon.co.uk/Computers/RexxStyleGuide.html=
#ProcComment">LZ78=20
  demo </A>for an example. </LI></UL>
<P><IMG height=3D20 =
src=3D"http://www.erroneousbee.demon.co.uk/Pics/fish4.gif"=20
width=3D45 name=3DGraphic20>Other miscellaneous rules:</P>
<UL>
  <LI>Use <STRONG>i, k, j,</STRONG> etc. as loop control variables. This =
can=20
  make your code run faster, and helps keep statements short..=20
  <LI>Indent <STRONG>do</STRONG>, <STRONG>select</STRONG>, and other =
similar=20
  structures with between 1 and 3 spaces. </LI></UL>
<P><IMG height=3D20 =
src=3D"http://www.erroneousbee.demon.co.uk/Pics/fish4.gif"=20
width=3D45 name=3DGraphic21><STRONG>An aside on following a =
ruleset:</STRONG> One=20
important comment that must be made, is that it is not so important that =
one set=20
of rules is followed in all cases, but <EM>it is important that a set of =
rules=20
is followed consistently in a piece of work. </EM>Leaping from one style =
to=20
another mid-procedure can hinder a readers understanding of the =
program.</P>
<HR>

<H1 align=3Dcenter>Style Example</H1>
<P><IMG height=3D20 =
src=3D"http://www.erroneousbee.demon.co.uk/Pics/fish4.gif"=20
width=3D45 name=3DGraphic22>Here's an example program, with two similar =
internal=20
functions present, in two slightly different styles. The compress =
function=20
follows the above example set of guidelines. The uncompress function =
follows a=20
second consistent set of guidelines. Note how the uncompress function is =
easier=20
to read when no colour highlighting is used. Copy the program into a =
Rexx=20
sensitive editor, and the compress function becomes easier to read. </P>
<TABLE cellPadding=3D2 width=3D"100%" bgColor=3D#b4b8cd border=3D0>
  <TBODY>
  <TR>
    <TD><PRE>/* REXX =
----------------------------------------------------------
   SYNOPSIS : LZ78 compressor/decompressor demo
   VERSION  : 1.0
   CREATED  : April 1999=20
   NOTES    : From the uberFish Rexx Style Guide.
   --------------------------------------------------------------- */
/* Demo normal text compress/decompress */
say 'Normal text demo.'
inString  =3D 'If_I_were_a_Linesman,_' ,
         || 'I_would_execute_the_players_who_applauded_my_offsides.'

say 'Compressing 'LENGTH(inString)' byte string .....'
say inString

compString =3D Compress_LZ78(inString)
say 'Compressed as.....'
say compString

decompString =3D Uncompress_LZ78(compString)
say 'Decompressed as.....'
say decompString

/* Demo Highly redundant text compress/decompress */
say
say 'Highly redundant demo.'
inString  =3D 'Oogachacka,Oogachacka,Oogachacka,'
inString  =3D inString||inString||inString||inString
inString  =3D inString||inString||inString||inString
say 'Compressing 'LENGTH(inString)' byte string .....'
say inString

compString =3D Compress_LZ78(inString)
say 'Compressed as.....'
say compString

decompString =3D Uncompress_LZ78(compString)
say 'Decompressed as.....'
say decompString


exit 0</PRE><PRE><A name=3DProcComment>/**</A> =
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
    Demo LZ78 compressor. In reality, the output would be formatted
    to take up less space then the original, E,g, in 9bit bytes,
    with the high order bit set on when the char is a dictionary
    reference, or something.
    Oh, and it doesnt like spaces, cos I use WORDPOS() to search
    the dictionary.=20
   ----------------------------------------------------------------- */
Compress_LZ78: procedure
parse arg inString

/* Initialise the dictionary, output string, etc */
outString =3D '' /* output string                                    */
d         =3D '' /* Dictionary. Blank delimited 'words'              */
w         =3D '' /* Last used phrase                                 */
outCode   =3D '' /* Our current dictionary reference for this phrase */

/* For every char in the input string, output the char, or a
   dictionary reference */
do i =3D 1 to LENGTH(inString)

   /* Get next input char, and make phrase */
   thisChar =3D SUBSTR(inString,i,1)
   thisPhrase =3D w||thisChar

   /* If the new phrase is in the dictionary, queue up this dictionary
      reference to go into the output string */
   if WORDPOS(thisPhrase,d) &gt; 0 then do
      if outCode =3D '' then outString =3D =
LEFT(outString,LENGTH(outString)-1)
      outCode =3D '&lt;'WORDPOS(thisPhrase,d)'&gt;'
      w =3D thisPhrase
      end

   /* If the new phrase wasnt in the dictionary, output it */
   else do
      outString =3D outString||outCode||thisChar
      outCode   =3D ''
      d =3D d thisPhrase
      w =3D thisChar
      end
end

/* return the compressed string */
return outString||outCode</PRE><PRE>/** =
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
    Demo LZ78 uncompressor.
    Here Ive switched to another style for comparison.
    ----------------------------------------------------------------- */
Uncompress_LZ78: procedure

parse arg inString

/* Initialise stuff */
outString =3D ''
d =3D ''
w =3D ''

/* Loop across each char in input string, building dictionary
   and output string as we go */
Do i =3D 1 To Length(inString)
   /* Get next char from input string */
   thisChar =3D Substr(inString,i,1)
   /* If the char is a code, then look up code in dictionary,
      add new phrase to dictionary, add phrase to output */
   If thisChar =3D '&lt;' Then
    Do
      thisCode =3D Substr(inString,i+1,Pos('&gt;',inString,i)-i-1)
      thisOut  =3D Word(d,thisCode)
      d =3D d || ' ' || w || Left(thisOut,1)
      w =3D thisOut
      i =3D i + Length(thisCode) +1
      outString =3D outString || thisOut
    End
   /* Else add phrase to dictionary and output the character */
   Else
    Do
      d =3D d || ' ' || w || thisChar
      w =3D thisChar
      outString =3D outString || thisChar
    End
End</PRE><PRE>/* Return the uncompressed string */
Return outString
</PRE></TD></TR></TBODY></TABLE>
<P>Spot the line that is longer than 80 characters. In ISPF it should be =
wrapped=20
in whatever way is consistent with your treatment if <STRONG>IF THEN DO=20
</STRONG>constructs:</P>
<TABLE cellPadding=3D2 width=3D"100%" bgColor=3D#b4b8cd border=3D0>
  <TBODY>
  <TR>
    <TD><PRE>if outCode =3D '' then
   outString =3D =
LEFT(outString,LENGTH(outString)-1)</PRE></TD></TR></TBODY></TABLE>
<HR>

<H1 align=3Dcenter>Enforcing Programming Standards.</H1>
<P>There's little point in setting guidelines for writing programs if =
they're=20
going to be ignored. You have to make people want to follow your =
guidelines.</P>
<P><IMG height=3D20 =
src=3D"http://www.erroneousbee.demon.co.uk/Pics/fish4.gif"=20
width=3D45 name=3DGraphic23>Here are some ways of encouraging the use of =
programming=20
standards:</P>
<UL>
  <LI>Allow individuals to follow the guidelines as they see fit.=20
  <LI>Use management control.=20
  <LI>Automate the process by supplying easy to use tools to manage =
internal=20
  documentation and format code. </LI></UL>
<P>Relying on individuals can fail if lazy or naive programmers fail to =
follow=20
guidelines. It does allow creative and expert programmers the freedom to =
use=20
systems they are comfortable and productive with.</P>
<P>Management control is particularly suited to organizations that have =
a=20
Quality Assurance program. </P>
<P>A tools led approach can be combined with other approaches. There is =
some=20
development effort to get tools into place, and the tools must be =
flexible and=20
fit for their purpose. Generally, a handful of ISPF EDIT macros to =
perform=20
various formatting tasks will suffice.</P>
<P>&nbsp;</P>
<HR>

<H1 align=3Dcenter>Concatenating Strings.</H1>
<P>There are two schools of thought on whether to explicitly use the =
string=20
concatenation operator ( || ) or not.</P>
<TABLE cellPadding=3D2 width=3D"100%" bgColor=3D#b4b8cd border=3D0>
  <TBODY>
  <TR>
    <TD><PRE>say 'Explicit use of operators'
newString =3D oldString || ' Some Text ' || MYFUNC('ham','eggs')=20
say Status_Char(userStatus,'TEXT') || ': ' ,
  ||userName || ' is ' || userStatus</PRE><PRE>say 'Omission of =
operators.'
newString =3D oldString 'Some Text' MYFUNC('ham','eggs')=20
say Status_Char(userStatus,'TEXT')':' userName 'is' =
userStatus</PRE></TD></TR></TBODY></TABLE>
<P>There are some good reasons to use concatenation operators, and some =
good=20
reasons not to. </P>
<P><IMG height=3D20 =
src=3D"http://www.erroneousbee.demon.co.uk/Pics/fish4.gif"=20
width=3D45 name=3DGraphic11>Points for the use of the concatenation =
operator:</P>
<UL>
  <LI>Programmers supporting your code often do not use Rexx regularly.=20
  <LI>Component elements of the string will be explicit to the reader.=20
  <LI>Unexpected spaces can creep in when ommitting concatenation =
operators.=20
  </LI></UL>
<P><IMG height=3D20 =
src=3D"http://www.erroneousbee.demon.co.uk/Pics/fish4.gif"=20
width=3D45 name=3DGraphic11>Points for ommiting the operator whenever=20
convenient:</P>
<UL>
  <LI>Less is more. The resulting code is tidier.=20
  <LI>The Hilite function of the editor makes the component elements =
clear=20
  enough anyway.=20
  <LI>There is less chance of the statement overrunning onto the next =
line.=20
  <LI>You don't have to explicitly include spaces inserted between the =
strings.=20
  E.g. <STRONG>var1 || ' ' || var2</STRONG> <EM>versus</EM> <STRONG>var1 =

  var2</STRONG> </LI></UL>
<HR>

<H1 align=3Dcenter>Some Other Dos and Don'ts</H1>
<P><IMG height=3D20 =
src=3D"http://www.erroneousbee.demon.co.uk/Pics/fish4.gif"=20
width=3D45 name=3DGraphic23>Don't use too many levels of =
indirection.<BR>For=20
instance, there is often little use in storing ISPF panel names in =
variables=20
when address ISPEXEC "DISPLAY PANEL(MYPANEL)" pinpoints exactly where in =
your=20
exec that panel MYPANEL is actually used. Having functions call =
functions that=20
call functions can equally make debugging an exec very tiresome indeed, =
so make=20
sure that you comment what is going on if you do have to create a =
complicated=20
structure.</P>
<P><IMG height=3D20 =
src=3D"http://www.erroneousbee.demon.co.uk/Pics/fish4.gif"=20
width=3D45 name=3DGraphic23>Do make sure abstracted procedures allow =
full access to=20
the underlying data.<BR>For instance, say you put a nice shell exec =
around TSO=20
LISTCAT. Your shell program should be able to control all arguments for =
LISTCAT,=20
and return any information returned by LISTCAT to the caller. Otherwise =
you may=20
have to create a new interface for your old shell if new LISTCAT data is =
needed.=20
Adding new functionality to old code creates backwards compatibility =
problems,=20
and maintenance problems as the code becomes 'hairy' from unnecessary=20
revisions.</P>
<P><IMG height=3D20 =
src=3D"http://www.erroneousbee.demon.co.uk/Pics/fish4.gif"=20
width=3D45 name=3DGraphic23>Don't hide information in variables set far =
away from=20
where they are used.<BR>Its one thing to have a nice block of commented=20
assignations near the top of an exec or procedure, but its another thing =

entirely to place assignation statements in obscure parts of the exec, =
far away=20
from where they will actually be used.</P>
<P><IMG height=3D20 =
src=3D"http://www.erroneousbee.demon.co.uk/Pics/fish4.gif"=20
width=3D45 name=3DGraphic23>Do end all internal procedures with an =
unconditional=20
RETURN.<BR>This makes it clear to the reader when a procedure ends and =
may help=20
code formatting tools to spot the end of internal procedures.</P>
<HR>

<H1 align=3Dcenter>Send Feedback</H1>
<P align=3Dleft><IMG height=3D20=20
src=3D"http://www.erroneousbee.demon.co.uk/Pics/fish4.gif" width=3D45=20
name=3DGraphic23>Please <A href=3D"mailto:NHancock@bigfoot.com">drop me =
a line</A>,=20
and tell me about any improvements you think could be made to this =
page.</P>
<UL>
  <LI>
  <P align=3Dleft>Was the information useful?</P>
  <LI>
  <P align=3Dleft>Was the information complete and concise?</P>
  <LI>
  <P align=3Dleft>Did you understand the information?</P></LI></UL>
<HR>

<P align=3Dcenter><!-- webbot bot=3D"HTMLMarkup" startspan --><!-- BEGIN =
WEBSIDESTORY CODE v5 --><!-- COPYRIGHT 1998-1999 WEBSIDESTORY, INC. ALL =
RIGHTS RESERVED.  U.S. PATENT PENDING. --><A=20
href=3D"http://rd1.hitbox.com/rd?acct=3DW8190430682181NU0&amp;p=3Ds"><IMG=
 height=3D62=20
alt=3D"Click Here!"=20
src=3D"http://hg1.hitbox.com/HG?hc=3Dw116&amp;l=3Dy&amp;hb=3DW81904306821=
81NU0&amp;cd=3D1&amp;n=3DRexx+Style+Guide"=20
width=3D88 border=3D0 name=3DGraphic24></A></P>
<P><!-- END WEBSIDESTORY CODE --><!-- webbot bot=3D"HTMLMarkup" endspan =
--></P></BODY></HTML>

------=_NextPart_000_0021_01C6A769.85B1E230
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://www.erroneousbee.demon.co.uk/Pics/o_up.gif

R0lGODlhHgAeANcAAAAAAEAAAIAAAKAAAMAAAOAAAP8AAABAAEBAAIBAAKBAAMBAAOBAAP9AAACA
AECAAICAAKCAAMCAAOCAAP+AAACgAECgAICgAKCgAMCgAOCgAP+gAADAAEDAAIDAAKDAAMDAAODA
AP/AAADgAEDgAIDgAKDgAMDgAODgAP/gAAD/AED/AID/AKD/AMD/AOD/AP//AAAAQEAAQIAAQKAA
QMAAQOAAQP8AQABAQEBAQIBAQKBAQMBAQOBAQP9AQACAQECAQICAQKCAQMCAQOCAQP+AQACgQECg
QICgQKCgQMCgQOCgQP+gQADAQEDAQIDAQKDAQMDAQODAQP/AQADgQEDgQIDgQKDgQMDgQODgQP/g
QAD/QED/QID/QKD/QMD/QOD/QP//QAAAgEAAgIAAgKAAgMAAgOAAgP8AgABAgEBAgIBAgKBAgMBA
gOBAgP9AgACAgECAgICAgKCAgMCAgOCAgP+AgACggECggICggKCggMCggOCggP+ggADAgEDAgIDA
gKDAgMDAgODAgP/AgADggEDggIDggKDggMDggODggP/ggAD/gED/gID/gKD/gMD/gOD/gP//gAAA
wEAAwIAAwKAAwMAAwOAAwP8AwABAwEBAwIBAwKBAwMBAwOBAwP9AwACAwECAwICAwKCAwMCAwOCA
wP+AwACgwECgwICgwKCgwMCgwOCgwP+gwADAwEDAwIDAwKDAwMDAwODAwP/AwADgwEDgwIDgwKDg
wMDgwODgwP/gwAD/wED/wID/wKD/wMD/wOD/wP//wAAA/0AA/4AA/6AA/8AA/+AA//8A/wBA/0BA
/4BA/6BA/8BA/+BA//9A/wCA/0CA/4CA/6CA/8CA/+CA//+A/wCg/0Cg/4Cg/6Cg/8Cg/+Cg//+g
/wDA/0DA/4DA/6DA/8DA/+DA///A/wDg/0Dg/4Dg/6Dg/8Dg/+Dg///g/wD//0D//4D//6D//8D/
/+D//////8DcwKbK8P/78KCgpGBgYKCgoODg4CAgYEBAYMDAoECAoCwAAAAAHgAeAAAIjQDpCRxI
sKDBgwgTKlyYkAnDhwOZSIT4UKJDigotTsSIUONFjgU9bgQZUSTJkiI/gkw5kiNLiyRftoQoEybG
mjMXMgGgkedOAEBzNvQp0SdRnjR39iy6tKJSi0ab6mQKlepTlQeragUa1GZHrVSJemy49KpYjV89
drVq0iDOmi6FnvR6kiDdugLv4sUYEAA7

------=_NextPart_000_0021_01C6A769.85B1E230
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://www.erroneousbee.demon.co.uk/Pics/o_mailto.gif

R0lGODlhHgAeANcAAAAAAEAAAIAAAKAAAMAAAOAAAP8AAABAAEBAAIBAAKBAAMBAAOBAAP9AAACA
AECAAICAAKCAAMCAAOCAAP+AAACgAECgAICgAKCgAMCgAOCgAP+gAADAAEDAAIDAAKDAAMDAAODA
AP/AAADgAEDgAIDgAKDgAMDgAODgAP/gAAD/AED/AID/AKD/AMD/AOD/AP//AAAAQEAAQIAAQKAA
QMAAQOAAQP8AQABAQEBAQIBAQKBAQMBAQOBAQP9AQACAQECAQICAQKCAQMCAQOCAQP+AQACgQECg
QICgQKCgQMCgQOCgQP+gQADAQEDAQIDAQKDAQMDAQODAQP/AQADgQEDgQIDgQKDgQMDgQODgQP/g
QAD/QED/QID/QKD/QMD/QOD/QP//QAAAgEAAgIAAgKAAgMAAgOAAgP8AgABAgEBAgIBAgKBAgMBA
gOBAgP9AgACAgECAgICAgKCAgMCAgOCAgP+AgACggECggICggKCggMCggOCggP+ggADAgEDAgIDA
gKDAgMDAgODAgP/AgADggEDggIDggKDggMDggODggP/ggAD/gED/gID/gKD/gMD/gOD/gP//gAAA
wEAAwIAAwKAAwMAAwOAAwP8AwABAwEBAwIBAwKBAwMBAwOBAwP9AwACAwECAwICAwKCAwMCAwOCA
wP+AwACgwECgwICgwKCgwMCgwOCgwP+gwADAwEDAwIDAwKDAwMDAwODAwP/AwADgwEDgwIDgwKDg
wMDgwODgwP/gwAD/wED/wID/wKD/wMD/wOD/wP//wAAA/0AA/4AA/6AA/8AA/+AA//8A/wBA/0BA
/4BA/6BA/8BA/+BA//9A/wCA/0CA/4CA/6CA/8CA/+CA//+A/wCg/0Cg/4Cg/6Cg/8Cg/+Cg//+g
/wDA/0DA/4DA/6DA/8DA/+DA///A/wDg/0Dg/4Dg/6Dg/8Dg/+Dg///g/wD//0D//4D//6D//8D/
/+D//////8DcwKbK8P/78KCgpGBgYKCgoODg4CAgYEBAYMDAoECAoCwAAAAAHgAeAAAIpwDpCRxI
sKDBgwgTKjzIpKHDhxAjQiQosaLFhhQvViyIcaBDjhcFYuwoUqNEekw8plRpcmLGjCsNtiSJcqZG
mDY3slTYEmfOiD5/PoS5sKROo0JdIk36kSXTpkufFp2qEACAgVYJXsWadevBq2DpeQ2LVaBXg1vT
lj2rFmHbsWK1mk34dq7duHi/2k1rNeteugXb5hWMNnDev4cNyz0bt6/YvoypTg0IADs=

------=_NextPart_000_0021_01C6A769.85B1E230
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://www.erroneousbee.demon.co.uk/Pics/fish3.gif

R0lGODlheAA8ANcFAAAAgP+AQANSIT1ZEf8AAAAAAP9XBgCAgICAQP////+SXv8AgICAAP//AACA
AP//gABAQP9sJkhjJ1NyLgI+GACA/4AAgAD/AP+ofQAA/8DAwIBAAEAAAIAAAKAAAMAAAOAAAABA
AEBAAKBAAMBAAOBAAP9AAECAAKCAAMCAAOCAAP+AAACgAECgAICgAKCgAMCgAOCgAP+gAADAAEDA
AIDAAKDAAMDAAODAAP/AAADgAEDgAIDgAKDgAMDgAODgAP/gAED/AID/AKD/AMD/AOD/AAAAQEAA
QIAAQKAAQMAAQOAAQP8AQEBAQIBAQKBAQMBAQOBAQP9AQACAQECAQKCAQMCAQOCAQACgQECgQICg
QKCgQMCgQOCgQP+gQADAQEDAQIDAQKDAQMDAQODAQP/AQADgQEDgQIDgQKDgQMDgQODgQP/gQAD/
QED/QID/QKD/QMD/QOD/QP//QEAAgKAAgMAAgOAAgABAgEBAgIBAgKBAgMBAgOBAgP9AgECAgICA
gKCAgMCAgOCAgP+AgACggECggICggKCggMCggOCggP+ggADAgEDAgIDAgKDAgMDAgODAgP/AgADg
gEDggIDggKDggMDggODggP/ggAD/gED/gID/gKD/gMD/gOD/gAAAwEAAwIAAwKAAwMAAwOAAwP8A
wABAwEBAwIBAwKBAwMBAwOBAwP9AwACAwECAwICAwKCAwMCAwOCAwP+AwACgwECgwICgwKCgwMCg
wOCgwP+gwADAwEDAwIDAwKDAwODAwP/AwADgwEDgwIDgwKDgwMDgwODgwP/gwAD/wED/wID/wKD/
wMD/wOD/wP//wEAA/4AA/6AA/8AA/+AA//8A/wBA/0BA/4BA/6BA/8BA/+BA//9A/0CA/4CA/6CA
/8CA/+CA//+A/wCg/0Cg/4Cg/6Cg/8Cg/+Cg//+g/wDA/0DA/4DA/6DA/8DA/+DA///A/wDg/0Dg
/4Dg/6Dg/8Dg/+Dg///g/wD//0D//4D//6D//8D//+D//8DcwKbK8CH5BAEAAAkALAAAAAB4ADwA
AAj+ABMIHEiwoMGDCBMqXMiwocOHECNKnEixosWLGDNq3Mixo8ePIEOKHDkxAIGTKE8GCDCn5RyS
MD+uXOlyDgAAJ12qjMlTIss5BgIMrBkAlVGjAGa6FNqzKUIFCmauNEDVwNKbUo+uvOm0KVSoK8EG
EEB2rICVZQ0QMNpy682kTLt+dOAgAVmyXwlI3cv3bNgCQVMSuArAgFyOdOn6nalSL2OTeqOqHDuz
QNS2W4saNXw4Y2IBBcrypTy6NN+oSjF3xkjWAegCsAsEgEBbquMFj/dOZqzXsQGkVFdXRICAbIME
sWGPpQ3BNOm9i01TDcBZuETiCBocTw47QYYMK5v+O5aKe/SC6FLLgq0ecyVG7Nm3Jxd44ECG5s3R
8y0fgH//8ridhRpPmVkEHwIAaIccdwnU5+ABAQwAAWr/4bbAhRaSlx56CpBEUwKoxCURAwcmeNyC
BSDX4IP1ZTDAAAKKtRd/4/HHYYcy2RSiSSJChAADQP5oonYnCtTAgw/Ul+RAL4alwHgazoThhaVx
xBIAO66Fyhw9+gjklwwMWeSRD0KQ5AFm2uUkhStB6ZxoUmHEklE8bpmUXhWRiF2QNxGpHYtoPpAY
c2N9NROFC7gppXPu+TRHiEwQgCVjTDQ60RGYHrEnkADUdySZStI2gAMS3kUWBGQlEEBUqJUVnX/+
0DmnkFWQPgqXSZViGWJFmWK6KZCA1neThHSVaupZeLHJ6IxtoiVABNBCOxpgBTy6I67WrsREpZZG
hOkD4D7wawXkPugAABAU8OKoAyRAgatnnScAhQokSlp0cJqHFrRVBVVZtXMwkeW2P3EZwLa8UhDu
who8YAG45JI7gLrqrltXfseqx2iAZ+nll15U6vbsTEnJZpRsBDCx1MHbJmWUgQqDC9sDGmhgwc0P
UFABXRSs67OxGZ8n1ZOmefwYrDzOJO1K1UYaAAACa5XUTSkZiMAAPfsc880WOEBBzxX/7ACqGZva
gHlTQuefvWRdGG1SBqhc09x0z33R1S9KoLf+BBMnlgCpP7+YALpll73qSkgXzVe01M0Ut8oFYIDB
Uahg8DRWcV7k8958w8bui2ELnoDPGZuFLJuJK6pXBFU1HhQAEQQA26Pbyl37THRmrvkAnPMtwQSh
M+CzQD+/W/hdysKaOHWxTzdd49oKXG3uP0VfOxMb8a73ixNMMIDw34Mv+s9km34XZfE6R6Pj/TIe
O+sFbEndb0xUW1RKLX2kfd7efxl+u6Mbnc/GAoDzlQ0sy5NSUBbYL4NgqyhWcZm2WqIruOjPe97z
WcUCGLibiEoAMAJhCJGnrKm0qTfzq8pCDhYwVADAYFhKikC4JBBUeGQA3QOe9/gWuB6+CAL+LxLh
ukwlI6lMpzH9Co5CZKey39AEKzYUCEuwBxLhAS90PxOgD31oKiNOxV97iUiKmoiKSBnsad0CCQ4B
OIBmbPGNExsiAP0CRiNORzkU4RakdgKiNHKkGQloQDPcCMd1hS5CEyPAutz4gL0YZn4zAYVNQAGA
iuiROipzTEwEOcgXEbKT6xLfAQYgSSmYcpFtDMAgq4ITqIGCR3NIWQBAUZEC6LEqL2mKJwcJyl1+
YAAfmAMoPnCAOZzyZ81QpVAMUACc0ASNkqSiRZ7Zpa608ZqEBOYvDzDMUg7AmANAACClKMxYolFl
aEQFATSSlEdV8zDjTMAHgmkAKQATFAPAQGSTRMQlLuklYLQbDEeYYJV3CmcO83SAPT+AzxdJAZwF
+aczAQoSqL3QOgaRgkAk6YA5vOiXA3ioPQGYAGFKChTqPJhBL7JMjBrkl+X8JimDGdJ2aZScoNAL
ltYpTZfG5CXt8qhHhwlOmQ6kkpTUSxR92hSProumDbWnA5myUqaOBKQJkOS6aJmQg1m1Kx79wOik
MM+sihUhufwqWIFZUpKq9a3yhKtc50rXutr1rnjNq173yte++vWvgA1sRwICADs=

------=_NextPart_000_0021_01C6A769.85B1E230
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://www.erroneousbee.demon.co.uk/Pics/fish4.gif

R0lGODlhLQAUANcFAAAAgP+AQANSIT1ZEf8AAAAAAP9XBgCAgICAQP////+SXv8AgICAAP//AACA
AP//gABAQP9sJkhjJ1NyLgI+GACA/4AAgAD/AP+ofQAA/8DAwIBAAEAAAIAAAKAAAMAAAOAAAABA
AEBAAKBAAMBAAOBAAP9AAECAAKCAAMCAAOCAAP+AAACgAECgAICgAKCgAMCgAOCgAP+gAADAAEDA
AIDAAKDAAMDAAODAAP/AAADgAEDgAIDgAKDgAMDgAODgAP/gAED/AID/AKD/AMD/AOD/AAAAQEAA
QIAAQKAAQMAAQOAAQP8AQEBAQIBAQKBAQMBAQOBAQP9AQACAQECAQKCAQMCAQOCAQACgQECgQICg
QKCgQMCgQOCgQP+gQADAQEDAQIDAQKDAQMDAQODAQP/AQADgQEDgQIDgQKDgQMDgQODgQP/gQAD/
QED/QID/QKD/QMD/QOD/QP//QEAAgKAAgMAAgOAAgABAgEBAgIBAgKBAgMBAgOBAgP9AgECAgICA
gKCAgMCAgOCAgP+AgACggECggICggKCggMCggOCggP+ggADAgEDAgIDAgKDAgMDAgODAgP/AgADg
gEDggIDggKDggMDggODggP/ggAD/gED/gID/gKD/gMD/gOD/gAAAwEAAwIAAwKAAwMAAwOAAwP8A
wABAwEBAwIBAwKBAwMBAwOBAwP9AwACAwECAwICAwKCAwMCAwOCAwP+AwACgwECgwICgwKCgwMCg
wOCgwP+gwADAwEDAwIDAwKDAwODAwP/AwADgwEDgwIDgwKDgwMDgwODgwP/gwAD/wED/wID/wKD/
wMD/wOD/wP//wEAA/4AA/6AA/8AA/+AA//8A/wBA/0BA/4BA/6BA/8BA/+BA//9A/0CA/4CA/6CA
/8CA/+CA//+A/wCg/0Cg/4Cg/6Cg/8Cg/+Cg//+g/wDA/0DA/4DA/6DA/8DA/+DA///A/wDg/0Dg
/4Dg/6Dg/8Dg/+Dg///g/wD//0D//4D//6D//8D//+D//8DcwKbK8CH5BAEAAAkALAAAAAAtABQA
AAj+ABMIHEiwoMGDCBMqXDgnAIGHCyNKHAggAKoAFecYCBBAwcSPBi8GmKOAIwEFD00GEOAAZEQD
Gzmu5ChAZgAIBQokEIAg4cgAEmnKXEB0QccABw7kLNAAQc+DGC/O8TnTJgGOJR8cgHCgQYIGABgw
QBiAicWrqGIGiBDBoVGbWAXIheBgQNIDYhEcOXLwYUVUTAgUWOsQruEFcgUMWOyAggUNBR5QIGux
7BwmcwpUDGDgqmG5KxUnWDzAQQEJEgYoBICqIec5BATChAlXAeiai0cPYDAht0KMZQ1A5RhTLunj
pAtMkEgbIairzw00mz5ACqjdA5otbvZRuELMI6cqBhgQ4IOUDwm4u5QYeGQCKVLmDJgzdb19gbnR
39+fQD///wAGKOCABAUEADs=

------=_NextPart_000_0021_01C6A769.85B1E230
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://www.erroneousbee.demon.co.uk/Pics/o_plus.gif

R0lGODlhMgAKAOcAAP+EQv///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACwAAAAAMgAKAAcIPAADCBxI
sKDBgwgPAgCQsKHDhwYXQpxIMSLDihgnSszI0eLCjx87dgRJ8qJIkRtPqgyQciVKky5HwgwQEAA7

------=_NextPart_000_0021_01C6A769.85B1E230
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://www.erroneousbee.demon.co.uk/Pics/o_minus.gif

R0lGODlhMgAKAOcAAP+EQv///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACwAAAAAMgAKAAcILwADCBxI
sKDBgwgTKlzIsKHDhxAjSpxIsSJCABgzarQoUaNHABxDihxJsqTJiQEBADs=

------=_NextPart_000_0021_01C6A769.85B1E230
Content-Type: application/octet-stream
Content-Transfer-Encoding: base64
Content-Location: http://hg1.hitbox.com/HG?hc=w116&l=y&hb=W8190430682181NU0&cd=1&n=Rexx+Style+Guide

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
YDpYdTVqbG0zfl1aSWElIQA7

------=_NextPart_000_0021_01C6A769.85B1E230--
